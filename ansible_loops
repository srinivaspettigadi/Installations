-
    name: 'Install required packages'
    hosts: localhost
    vars:
        packages:
            - httpd
            - binutils
            - glibc
            - ksh
            - libaio
            - libXext
            - gcc
            - make
            - sysstat
            - unixODBC
            - mongodb
            - nodejs
            - grunt
    tasks:
        -
            yum: 
               name: '{{item}}'
               state: present
            with_items: '{{packages}}'
              


==============================================

-
    name: 'Print list of fruits'
    hosts: localhost
    vars:
        fruits:
            - Apple
            - Banana
            - Grapes
            - Orange
    tasks:
        -  
           command: 'echo "{{item}}" '
           with_items: '{{fruits}}'
        

Update the playbook with a play to Execute a script on all web server nodes. The script is located at /tmp/install_script.sh
======================================================================================================================================
[
    {
    "hosts": "web_nodes",
    "tasks": [
       {
        "script": "/tmp/install_script.sh"
       }
     ]
    }
]


============================================================================================================================================
Update the playbook to add a new task to start httpd services on all web nodes
-
    name: 'Execute a script on all web server nodes'
    hosts: localhost
    tasks:
        -
            name: 'Execute a script on all web server nodes'
            script: /tmp/s.sh
        -
            name: 'start httpd service'
            service: 'name=httpd state=started'
            
            
===================================================================================================================================================
Update the playbook to add a new task in the beginning to add an entry into /etc/resolv.conf file for hosts. The line to be added is nameserver 10.1.250.10

-
    name: 'Execute a script on all web server nodes'
    hosts: localhost
    tasks:
        -
            name: 'adding new line to playbook'
            lineinfile:
               path: /etc/resolv.conf
               line: nameserver 10.1.250.10
            
        -
        
            name: 'Execute a script'
            script: /tmp/install_script.sh
        -
            name: 'Start httpd service'
            service:
                name: httpd
                state: present

============================================================================================================================
Task
1. Adding the line in /etc/resolv.conf file using the lineinfile module
2. Creating a new user using user module
3. execute a sample script using the script module
4. adding the new argument for the playbook that httpd service is started using the service module
-
    name: 'Execute a script on all web server nodes and start httpd service'
    hosts: web_nodes
    tasks:
        -
            name: 'Update entry into /etc/resolv.conf'
            lineinfile:
                path: /etc/resolv.conf
                line: 'nameserver 10.1.250.10'

        - 
            name: 'creating the user'
            user: 
             name: web_user
             uid: 1040
             group: developers
        -
            name: 'Execute a script'
            script: /tmp/install_script.sh
        -
            name: 'Start httpd service'
            service:
                name: httpd
                state: present

-------------------------------------------------------------------
The playbook is used to update name server entry into resolv.conf file on localhost. 
The name server information is also updated in the inventory file as a variable nameserver_ip. Refer to the inventory file.

-
    name: 'Update nameserver entry into resolv.conf file on localhost'
    hosts: localhost
    tasks:
        -
            name: 'Update nameserver entry into resolv.conf file'
            lineinfile:
                path: /etc/resolv.conf
                line: nameserver {{ nameserver_ip }}
                
------------------------------------------------------------------------------------------------------------------------------

Ansible Variables
We have added a new task to disable SNMP port in the playbook. However the port is hardcoded in the playbook. 
Update the inventory file to add a new variable snmp_port and assign the value used here. Then update the playbook to use value from the variable.

Playbook.yml
--------------
-
    name: 'Update nameserver entry into resolv.conf file on localhost'
    hosts: localhost
    
      
    tasks:
        -
            name: 'Update nameserver entry into resolv.conf file'
            lineinfile:
                path: /etc/resolv.conf
                line: 'nameserver {{ nameserver_ip }}'
        -
            name: 'Disable SNMP Port'
            firewalld:
                port: '{{ snmp_port }}'
                permanent: true
                state: disabled
Inventory file

#Sample Inventory File

localhost ansible_connection=localhost nameserver_ip=10.1.250.10 snmp_port=160-161

--------------------------------------------------------------------------------------------
Display the var using debug

---
 - hosts: localhost
   vars:
    x: 45
   gather_facts: false
   tasks:
    - debug: var=x

-------------------------------

Passing command line arguments for var x
cmd.yml
---
 - hosts: localhost
   gather_facts: false
   tasks:
    - debug: var=x

ansible-playbook cmd.yml -e "x=20"
ansible-playbook cmd.yml --extra-vars "x=20"  ---------> you can pass the values in both the ways like -e and --extra-vars
ansible-playbook cmd_line.yml -e "{'x':34}"  ---------> this is scalar passing value type
=============================================================================================

Passing 2 values in palybook

---
 - hosts: localhost
   gather_facts: false
   tasks:
    - debug:
       msg:
        - "the value is: {{x}}"
        - "the value is: {{y}} " 
        
      ansible-plabook cmd.yml -e "x=30 y=40"
      
 ===============================================================================================
 
 Passing the values from another yml file
 
 1. variables_values.yml
 ---
   x: 45
   y: 100
   
   
---
 - hosts: localhost
   gather_facts: false
   tasks:
    - debug:
       msg:
        - "the value is: {{x}}"
        - "the value is: {{y}} " 
        
ansible-playbook -e "@variables_values.yml"

oot@srinivas-Inspiron-3521:/etc/ansible# ansible-playbook cmd_line.yml -e "@variables_values.yml"
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [localhost] *****************************************************************************************************************************

TASK [debug] *********************************************************************************************************************************
ok: [localhost] => {
    "msg": [
        "the value is: 45",
        "the value is: 100 "
    ]
}

PLAY RECAP ***********************************************************************************************************************************
localhost                  : ok=1    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  

==========================================================================================================================

Installing package and unnistalling the apache using present and absent thorugh passing the cmd line arguments


---
 - hosts: localhost
   gather_facts: false
   become: yes
   tasks:
    - name: install {{pkg}} 
      apt:
       name: "{{pkg}}"
       state: "{{req_state}}"

root@srinivas-Inspiron-3521:/etc/ansible# ansible-playbook install_httpd.yml -e "pkg=apache2 req_state=absent"  --> uninstalles (since state is absent)
root@srinivas-Inspiron-3521:/etc/ansible# ansible-playbook install_httpd.yml -e "pkg=apache2 req_state=present"  --> installes (since state is present)

INCLUDE MODULE
<span style="color: green"> INCLUDE MODULE </span>

=================

Use include module to add tasks to the playbook
==========================================================
Here we are adding the tasks to other yml file, the task1.yml file containes only the task
1. task1.yml

---
 - name: Play 1 task 2
   debug:
    msg: play 1 task 2


...           ---------------------> three dots indicate the end of yml file.

2. include_tasks.yml

---
 - name: including tasks
   hosts: localhost
   gather_facts: false
   tasks:
    - name: play1 task1
      debug:
       msg: play1 task1
    - include: task1.yml     -----------------------> we have included the task1.yml file inside the include_tasks.yml
    
ansible-playbook include_tasks.yml

root@srinivas-Inspiron-3521:/etc/ansible# ansible-playbook include_tasks.yml 
[WARNING]: provided hosts list is empty, only localhost is available. Note that the implicit localhost does not match 'all'

PLAY [including tasks] ***********************************************************************************************************************

TASK [play1 task1] ***************************************************************************************************************************
ok: [localhost] => {
    "msg": "play1 task1"
}

TASK [Play 1 task 2] *************************************************************************************************************************
ok: [localhost] => {
    "msg": "play 1 task 2"
}

PLAY RECAP ***********************************************************************************************************************************
localhost                  : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0  

====================================================================

KNOW the information of modules
---------------------------------

ansible-doc -l -----> list of modules
ansible-doc ping ----> information of hwo to use the modules and examples , its like man page for linux.

2. Use include module to add one complete playbook into another
=====================================================================
[ansible@controller ~]$ cat play2.yml
---
 - name: Play 2
   hosts: localhost
   gather_facts: false
   tasks:
     - name: Play 2 - Task 1
       debug:
         msg: "Play 2 - Task 1"
...

Include playbook
---
 - name: including tasks
   hosts: localhost
   gather_facts: false
   tasks:
    - name: play1 task1
      debug:
       msg: play1 task1
    - include: task1.yml     -----------------------> we have included the task1.yml (which contians the task only inside task1.yml)
 - include: play2.yml        -----------------------> here it is entire a new playbook named play2.yml

+================================================================== 
Here in the above example include is deprecated, so we need to use import_tasks for task import and import_playbook must be used as below  :::

---
 - name: import playbook
   hosts: localhost
   gather_facts: false
   tasks:
    - name: play1 task1
      debug:
       msg: play1 task1
    - import_tasks: task1.yml
 - import_playbook: play2.yml
 
 ================================================================================================================================

ANSIBLE ROLES
--------------

WE have ansible-galaxy community for the roles we want to define or create or init

ansible-galaxy init testrole  -------------> this is the role name testrole created , 

Community where we can download the roles directly and use, by using so we get all the required the folders and etc, created 

===============================================
https://galaxy.ansible.com/geerlingguy/docker |
                                              |
https://galaxy.ansible.com/community          |
===============================================

Commands
---------
1. Creating the role 
ansible-galaxy init <role-name>

2. Checking the list of roles
ansible-galaxy list
 
It checks the roles and give the path of roles created by default

root@srinivas-Inspiron-3521:/etc/ansible/roles# ansible-galaxy list
# /root/.ansible/roles
- geerlingguy.docker, 3.0.0
# /etc/ansible/roles
- role1, (unknown version)
[WARNING]: - the configured path /usr/share/ansible/roles does not exist.

3. Checking the ansible config options
ansible-config list
ansible-config dump | grep -i roles        ---> it gives the default path of roles created

oot@srinivas-Inspiron-3521:/etc/ansible/roles# ansible-config dump | grep -i roles
DEFAULT_ROLES_PATH(default) = ['/root/.ansible/roles', '/usr/share/ansible/roles', '/etc/ansible/roles']

ansible-config dump | grep -i inventory

root@srinivas-Inspiron-3521:/etc/ansible/roles# ansible-config dump | grep -i inventory
DEFAULT_INVENTORY_PLUGIN_PATH(default) = ['/root/.ansible/plugins/inventory', '/usr/share/ansible/plugins/inventory']
INVENTORY_ANY_UNPARSED_IS_FAILED(default) = False
INVENTORY_CACHE_ENABLED(default) = False
INVENTORY_CACHE_PLUGIN(default) = None
INVENTORY_CACHE_PLUGIN_CONNECTION(default) = None
INVENTORY_CACHE_PLUGIN_PREFIX(default) = ansible_facts
INVENTORY_CACHE_TIMEOUT(default) = 3600
INVENTORY_ENABLED(default) = ['host_list', 'script', 'auto', 'yaml', 'ini', 'toml']
INVENTORY_EXPORT(default) = False
INVENTORY_IGNORE_EXTS(default) = {{(BLACKLIST_EXTS + ( '.orig', '.ini', '.cfg', '.retry'))}}
INVENTORY_IGNORE_PATTERNS(default) = []
INVENTORY_UNPARSED_IS_FAILED(default) = False
VARIABLE_PRECEDENCE(default) = ['all_inventory', 'groups_inventory', 'all_plugins_inventory', 'all_plugins_play', 'groups_plugins_inventory', 'groups_plugins_play']

4.Checing the ansible configuration file
ansible-config view

5. To create a role inside the /etc/ansible/roles (or) any desired location 
ansible-galaxy install singleplatform-eng.users -p ./roles  ---> it will create the roles under the ./roles directory

root@srinivas-Inspiron-3521:/etc/ansible# ansible-galaxy list
# /root/.ansible/roles
- geerlingguy.docker, 3.0.0
# /etc/ansible/roles             
- role1, (unknown version)
- singleplatform-eng.users, v1.2.6          --------> it is installed in /etc/ansible/roles directory since we have given the command -p ./roles

===============================================================================================================================================================
If you have three tasks in one playbook and you want to execute the 1st and 2nd on the local machine and the 3rd on the node, how can you do it ??

ANSWER
-----------
---
- hosts: webservers
  serial: 5      -----------> how many hosts ansible must manage a single time

  tasks:
    - name: Take out of load balancer pool
      ansible.builtin.command: /usr/bin/take_out_of_pool {{ inventory_hostname }}
      delegate_to: 127.0.0.1                ----------------------------> run on the local machine

    - name: Actual steps would go here
      ansible.builtin.yum:
        name: acme-web-stack
        state: latest

    - name: Add back to load balancer pool
      ansible.builtin.command: /usr/bin/add_back_to_pool {{ inventory_hostname }}
      delegate_to: 127.0.0.1
      
-------------------------------------------------------------------------------------------------------
---
# ...

  tasks:
    - name: Take out of load balancer pool
      local_action: ansible.builtin.command /usr/bin/take_out_of_pool {{ inventory_hostname }}

# ...

    - name: Add back to load balancer pool
      local_action: ansible.builtin.command /usr/bin/add_back_to_pool {{ inventory_hostname }}

======================================================================================================================================
Serial --> how many hosts ansible must manage at a single time to execute

---
- name: test play
  hosts: webservers
  serial: 2
  gather_facts: False

  tasks:
    - name: first task
      command: hostname
    - name: second task
      command: hostname
